   #[1]RSS

     * LinkedIn
     * Twitter
     * Github
     * Google+
     * RSS

     * [2]Blog
     * [3]Portfolio

   [4][hapiger70x70.png]
   Check out my new project:
   [5]HapiGER Recommender System OpenSource Scalable Easy

Scalable Architecture DR CoN: Docker, Registrator, Consul, Consul Template
and Nginx

   Date:
   21st January 2015
   Tags:
   Docker Consul Architecture
   By Graham Jenson

   Docker is great fun when you start building things by plugging useful
   containers together. Recently I have been playing with [6]Consul and
   trying to plug things together to make a truly horizontally scalable
   web application architecture. Consul is a Service Discovery and
   Configuration application, made by [7]HashiCorp the people who brought
   us [8]Vagrant.

   Previously I experimented using Consul by using SRV records
   ([9]described here) to create a scalable architecture, but I found this
   approach a little complicated, and I am all about simple. Then I found
   [10]Consul Template which links to Consul to update configurations and
   restart application when services come up or go down.

   In this post I will describe how to use Docker to plug together Consul,
   Consul Template, Registrator and Nginx into a truly scalable
   architecture that I am calling DR CoN. Once all plugged together, DR
   CoN lets you add and remove services from the architecture without
   having to rewrite any configuration or restart any services, and
   everything just works!

Docker

   Docker is an API wrapper around LXC (Linux containers) so will only run
   on Linux. Since I am on OSX (as many of you probably are) I have
   written a post about [11]how to get Docker running in OSX using
   boot2docker. This is briefly described below:

   brew install boot2docker boot2docker init boot2docker up

   This will start a virtual machine running a Docker daemon inside an
   Ubuntu machine. To attach to the daemon you can run:

   export DOCKER_IP=`boot2docker ip` export DOCKER_HOST=`boot2docker
   socket`

   You can test Docker is correctly installed using:

   docker ps

Build a very simple Web Service with Docker

   To test the Dr CoN architecture we will need a service. For this, let
   create the simplest service that I know how (further described
   [12]here). Create a file called Dockerfile with the contents:

   FROM python:3 EXPOSE 80 CMD ["python", "-m", "http.server"]

   In the same directory as this file execute:

   docker build -t python/server .

   This will build the docker container and call it python/server, which
   can be run with:

   docker run -it \ -p 8000:80 python/server

   To test that it is running we can call the service with curl:

   curl $DOCKER_IP:8000

Consul

   Consul is best described as a service that has a DNS and a HTTP API. It
   also has many other features like health checking services, clustering
   across multiple machines and acting as a key-value store. To run Consul
   in a Docker container execute:

   docker run -it -h node \ -p 8500:8500 \ -p 8600:53/udp \
   progrium/consul \ -server \ -bootstrap \ -advertise $DOCKER_IP \
   -log-level debug

   If you browse to $DOCKER_IP:8500 there is a dashboard to see the
   services that are registered in Consul.

   To register a service in Consul's web API we can use curl:

   curl -XPUT \ $DOCKER_IP:8500/v1/agent/service/register \ -d '{ "ID":
   "simple_instance_1", "Name":"simple", "Port": 8000, "tags": ["tag"] }'

   Then we can query Consuls DNS API for the service using dig:

   dig @$DOCKER_IP -p 8600 simple.service.consul

   ``` ; <<>> DiG 9.8.3-P1 <<>> simple.service.consul ;; global options:
   +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id:
   39614 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0,
   ADDITIONAL: 0

   ;; QUESTION SECTION: ;simple.service.consul. IN A

   ;; ANSWER SECTION: simple.service.consul. 0 IN A 192.168.59.103

   ;; Query time: 1 msec ;; SERVER: 192.168.59.103#53(192.168.59.103) ;;
   WHEN: Mon Jan 12 15:35:01 2015 ;; MSG SIZE rcvd: 76 ```

   Hold on, there is a problem, where is the port of the service?
   Unfortunately DNS A records do not return the port of a service, to get
   that we must check SRV records:

   dig @$DOCKER_IP -p 8600 SRV simple.service.consul

   ``` ; <<>> DiG 9.8.3-P1 <<>> SRV simple.service.consul ;; global
   options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status:
   NOERROR, id: 3613 ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1,
   AUTHORITY: 0, ADDITIONAL: 1

   ;; QUESTION SECTION: ;simple.service.consul. IN SRV

   ;; ANSWER SECTION: simple.service.consul. 0 IN SRV 1 1 8000
   node.node.dc1.consul.

   ;; ADDITIONAL SECTION: node.node.dc1.consul. 0 IN A 192.168.59.103

   ;; Query time: 1 msec ;; SERVER: 192.168.59.103#53(192.168.59.103) ;;
   WHEN: Mon Jan 12 15:36:54 2015 ;; MSG SIZE rcvd: 136 ```

   SRV records are difficult to use because they are not supported by many
   technologies.

   The container [13]srv-router can be used with Consul and nginx to route
   incoming calls to the correct services, as [14]described here. However
   there is an easier way than that to use nginx to route to services.

Registrator

   Registrator takes environment variables defined when a Docker container
   is started and automatically registers it with Consul. For example:

   docker run -it \ -v /var/run/docker.sock:/tmp/docker.sock \ -h
   $DOCKER_IP progrium/registrator \ consul://$DOCKER_IP:8500

   Starting a service with:

   docker run -it \ -e "SERVICE_NAME=simple" \ -p 8000:80 python/server

   Will automatically add the service to Consul, and stopping it will
   remove it. This is the first part to plugin to DR CoN as it will mean
   no more having to manually register services with Consul.

   #Consul Template

   [15]Consul Template uses Consul to update files and execute commands
   when it detects the services in Consul have changed.

   For example, it can rewrite an nginx.conf file to include all the
   routing information of the services then reload the nginx configuration
   to load-balance many similar services or provide a single end-point to
   multiple services.

   I modified the Docker container from
   [16]https://github.com/bellycard/docker-loadbalancer for this example

   ``` FROM nginx:1.7

   #Install Curl RUN apt-get update -qq && apt-get -y install curl

   #Download and Install Consul Template ENV CTURL
   [17]http://bit.ly/15uhv24 RUN curl -L $CTURL | \ tar -C /usr/local/bin
   --strip-components 1 -zxf -

   #Setup Consul Template Files RUN mkdir /etc/consul-templates ENV
   CT_FILE /etc/consul-templates/nginx.conf

   #Setup Nginx File ENV NX_FILE /etc/nginx/conf.d/app.conf

   #Default Variables ENV CONSUL consul:8500 ENV SERVICE consul-8500

Command will

1. Write Consul Template File

2. Start Nginx

3. Start Consul Template

   CMD echo "upstream app { \n\ leastconn; \n\ {{range service
   \"$SERVICE\"}} \n\ server {{.Address}}:{{.Port}}; \n\ {{else}}server
   127.0.0.1:65535;{{end}} \n\ } \n\ server { \n\ listen 80 defaultserver;
   \n\ location / { \n\ proxypass http://app; \n\ } \n\ }" > $CTFILE; \
   /usr/sbin/nginx -c /etc/nginx/nginx.conf \ & CONSULTEMPLATELOG=debug
   consul-template \ -consul=$CONSUL \ -template
   "$CTFILE:$NXFILE:/usr/sbin/nginx -s reload"; ``` The repository for
   this file is [18]here.

   NOTE: the \n\ adds a new line and escapes the newline for Docker
   multiline command

   This Docker container will run both Consul Template and nginx, and when
   the services change it will rewrite the nginx app.conf file, then
   reload nginx.

   This container can be built with:

   docker build -t drcon .

   and run with:

   docker run -it \ -e "CONSUL=$DOCKER_IP:8500" \ -e "SERVICE=simple" \ -p
   80:80 drcon

   SERVICE is query used to select which services to include from Consul.
   So this DR CoN container will now load balance across all services
   names simple.

   #All Together

   Lets now plug everything together!

   Run Consul

   docker run -it -h node \ -p 8500:8500 \ -p 53:53/udp \ progrium/consul
   \ -server \ -bootstrap \ -advertise $DOCKER_IP

   Run Registrator

   docker run -it \ -v /var/run/docker.sock:/tmp/docker.sock \ -h
   $DOCKER_IP progrium/registrator \ consul://$DOCKER_IP:8500

   Run DR CoN

   docker run -it \ -e "CONSUL=$DOCKER_IP:8500" \ -e "SERVICE=simple" \ -p
   80:80 drcon

   Running curl $DOCKER_IP:80 will return:

   curl: (52) Empty reply from server

   Now start a service named simple

   docker run -it \ -e "SERVICE_NAME=simple" \ -p 8000:80 python/server

   This will cause:
    1. Registrator to register the service with Consul
    2. Consul Template to rewrite the nginx.conf then reload the
       configuration

   Now curl $DOCKER_IP:80 will be routed successfully to the service.

   If we then start another simple service on a different port with:

   docker run -it \ -e "SERVICE_NAME=simple" \ -p 8001:80 python/server

   Requests will now be load balances across the two services.

   A fun thing to do is to run while true; do curl $DOCKER_IP:80; sleep 1;
   done while killing and starting simple services and see that this all
   happens so fast no requests get dropped.

Conclusion

   Architectures like DR CoN are much easier to describe, distribute and
   implement using Docker and are impossible without good tools like
   Consul. Plugging things together and playing with Docker's ever more
   powerful tools fun and useful. Now I can create a horizontally scalable
   architecture and have everything just work.

Further Reading

   [19]The Docker Book
     * [20]Share on Facebook
     * [21]Share on Twitter

Related Posts

     * [22]Docker Web Services with Consul
       29th September 2014
       Docker, Consul, DevOps, Boot2Docker, Architecture
     * [23]The Smallest Docker Web Service That Could
       8th September 2014
       Python, Docker, Boot2Docker, Architecture, OS X
     * [24]Vagrant with Docker: How to set up Postgres, Elasticsearch and
       Redis on Mac OS X
       2nd July 2014
       Docker, Vagrant, Elasticsearch, Postgres, Redis, Tutorial, OS X
     * [25]Enterprise Software and Building Infinite Staircases
       23rd April 2014
       Book, Research, Architecture
     * [26]When to be a Software Architect
       17th March 2014
       Architecture, Book
     * [27]Boot 2 Docker: How to set up Postgres, Elasticsearch and Redis
       on Mac OS X
       14th February 2015
       Docker, Boot2Docker, Postgres, Elasticsearch, Redis

   Please enable JavaScript to view the [28]comments powered by Disqus.
   [29]comments powered by Disqus
   [graham-518e4a68930e82dc141a078c58facc68.jpg]
   By Graham Jenson
     * LinkedIn
     * Twitter
     * Github
     * Google+
     * RSS

   ____________________ 
     __________________________________________________________________

Related Posts

[30]Docker Web Services with Consul

   29th September 2014
   Docker, Consul, DevOps, Boot2Docker, Architecture
     __________________________________________________________________

[31]The Smallest Docker Web Service That Could

   8th September 2014
   Python, Docker, Boot2Docker, Architecture, OS X
     __________________________________________________________________

[32]Vagrant with Docker: How to set up Postgres, Elasticsearch and Redis on
Mac OS X

   2nd July 2014
   Docker, Vagrant, Elasticsearch, Postgres, Redis, Tutorial, OS X
     __________________________________________________________________

[33]Enterprise Software and Building Infinite Staircases

   23rd April 2014
   Book, Research, Architecture
     __________________________________________________________________

[34]When to be a Software Architect

   17th March 2014
   Architecture, Book
     __________________________________________________________________

[35]Boot 2 Docker: How to set up Postgres, Elasticsearch and Redis on Mac OS
X

   14th February 2015
   Docker, Boot2Docker, Postgres, Elasticsearch, Redis
     __________________________________________________________________

Follow Us

     * LinkedIn
     * Twitter
     * Github
     * Google+
     * RSS

     * [36]Blog
     * [37]Portfolio

   Powered with the help of [38]Ghost | Copyright © 2013 [39]Artivity

References

   Visible links
   1. http://www.maori.geek.nz/blog.rss
   2. http://www.maori.geek.nz/blog
   3. http://www.maori.geek.nz/portfolio
   4. http://www.hapiger.com/
   5. http://www.hapiger.com/
   6. https://www.consul.io/
   7. https://hashicorp.com/
   8. http://www.maori.geek.nz/post/vagrant_with_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x
   9. http://www.maori.geek.nz/post/docker_web_services_with_consul
  10. https://hashicorp.com/blog/introducing-consul-template.html
  11. http://www.maori.geek.nz/post/boot_2_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x
  12. http://www.maori.geek.nz/post/the_smallest_docker_web_service_that_could
  13. https://github.com/vlipco/srv-router
  14. http://www.maori.geek.nz/post/docker_web_services_with_consul
  15. https://hashicorp.com/blog/introducing-consul-template.html
  16. https://github.com/bellycard/docker-loadbalancer
  17. http://bit.ly/15uhv24
  18. https://github.com/grahamjenson/DR-CoN
  19. http://www.amazon.com/gp/product/B00LRROTI4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B00LRROTI4&linkCode=as2&tag=maor01-20&linkId=2QKZTS7EW7H2VZRM
  20. http://www.facebook.com/sharer.php?u=http://www.maori.geek.nz/post/scalable_architecture_dr_con_docker_registrator_consul_nginx
  21. http://twitter.com/home?status=http://www.maori.geek.nz/post/scalable_architecture_dr_con_docker_registrator_consul_nginx @grahamjenson
  22. http://www.maori.geek.nz/post/docker_web_services_with_consul
  23. http://www.maori.geek.nz/post/the_smallest_docker_web_service_that_could
  24. http://www.maori.geek.nz/post/vagrant_with_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x
  25. http://www.maori.geek.nz/post/enterprise_software_and_building_infinite_staircases
  26. http://www.maori.geek.nz/post/when_to_be_a_software_architect
  27. http://www.maori.geek.nz/post/boot_2_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x
  28. http://disqus.com/?ref_noscript
  29. http://disqus.com/
  30. http://www.maori.geek.nz/post/docker_web_services_with_consul
  31. http://www.maori.geek.nz/post/the_smallest_docker_web_service_that_could
  32. http://www.maori.geek.nz/post/vagrant_with_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x
  33. http://www.maori.geek.nz/post/enterprise_software_and_building_infinite_staircases
  34. http://www.maori.geek.nz/post/when_to_be_a_software_architect
  35. http://www.maori.geek.nz/post/boot_2_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x
  36. http://www.maori.geek.nz/blog
  37. http://www.maori.geek.nz/portfolio
  38. https://github.com/TryGhost/Ghost
  39. http://www.artivity.co.uk/

   Hidden links:
  41. http://www.maori.geek.nz/
  42. http://www.linkedin.com/pub/graham-jenson/6/a93/b07
  43. https://twitter.com/grahamjenson
  44. https://github.com/grahamjenson
  45. https://plus.google.com/105952473745800614264?rel=author
  46. http://www.maori.geek.nz/blog.rss
  47. http://www.maori.geek.nz/post/scalable_architecture_dr_con_docker_registrator_consul_nginx
  48. http://www.maori.geek.nz/post/docker_web_services_with_consul
  49. http://www.maori.geek.nz/post/the_smallest_docker_web_service_that_could
  50. http://www.maori.geek.nz/post/vagrant_with_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x
  51. http://www.maori.geek.nz/post/enterprise_software_and_building_infinite_staircases
  52. http://www.maori.geek.nz/post/when_to_be_a_software_architect
  53. http://www.maori.geek.nz/post/boot_2_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x
  54. http://www.linkedin.com/pub/graham-jenson/6/a93/b07
  55. https://twitter.com/grahamjenson
  56. https://github.com/grahamjenson
  57. https://plus.google.com/105952473745800614264?rel=author
  58. http://www.maori.geek.nz/blog.rss
  59. http://www.maori.geek.nz/post/docker_web_services_with_consul
  60. http://www.maori.geek.nz/post/the_smallest_docker_web_service_that_could
  61. http://www.maori.geek.nz/post/vagrant_with_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x
  62. http://www.maori.geek.nz/post/enterprise_software_and_building_infinite_staircases
  63. http://www.maori.geek.nz/post/when_to_be_a_software_architect
  64. http://www.maori.geek.nz/post/boot_2_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x
  65. http://www.linkedin.com/pub/graham-jenson/6/a93/b07
  66. https://twitter.com/grahamjenson
  67. https://github.com/grahamjenson
  68. https://plus.google.com/105952473745800614264?rel=author
  69. http://www.maori.geek.nz/blog.rss
  70. http://www.maori.geek.nz/post/scalable_architecture_dr_con_docker_registrator_consul_nginx
